<?php

declare(strict_types=1);

/*
 * MessagesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MessagesLib\Models;

use MessagesLib\Utils\DateTimeHelper;
use stdClass;

class Message implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $callbackUrl;

    /**
     * @var string
     */
    private $content;

    /**
     * @var string
     */
    private $destinationNumber;

    /**
     * @var bool|null
     */
    private $deliveryReport = false;

    /**
     * @var string[]|null
     */
    private $format;

    /**
     * @var string[]|null
     */
    private $media;

    /**
     * @var \DateTime|null
     */
    private $messageExpiryTimestamp;

    /**
     * @var array|null
     */
    private $metadata;

    /**
     * @var \DateTime|null
     */
    private $scheduled;

    /**
     * @var string|null
     */
    private $sourceNumber;

    /**
     * @var string|null
     */
    private $sourceNumberType;

    /**
     * @param string $content
     * @param string $destinationNumber
     */
    public function __construct(string $content, string $destinationNumber)
    {
        $this->content = $content;
        $this->destinationNumber = $destinationNumber;
    }

    /**
     * Returns Callback Url.
     * URL replies and delivery reports to this message will be pushed to
     */
    public function getCallbackUrl(): ?string
    {
        return $this->callbackUrl;
    }

    /**
     * Sets Callback Url.
     * URL replies and delivery reports to this message will be pushed to
     *
     * @maps callback_url
     */
    public function setCallbackUrl(?string $callbackUrl): void
    {
        $this->callbackUrl = $callbackUrl;
    }

    /**
     * Returns Content.
     * Content of the message
     */
    public function getContent(): string
    {
        return $this->content;
    }

    /**
     * Sets Content.
     * Content of the message
     *
     * @required
     * @maps content
     */
    public function setContent(string $content): void
    {
        $this->content = $content;
    }

    /**
     * Returns Destination Number.
     * Destination number of the message
     */
    public function getDestinationNumber(): string
    {
        return $this->destinationNumber;
    }

    /**
     * Sets Destination Number.
     * Destination number of the message
     *
     * @required
     * @maps destination_number
     */
    public function setDestinationNumber(string $destinationNumber): void
    {
        $this->destinationNumber = $destinationNumber;
    }

    /**
     * Returns Delivery Report.
     * Request a delivery report for this message
     */
    public function getDeliveryReport(): ?bool
    {
        return $this->deliveryReport;
    }

    /**
     * Sets Delivery Report.
     * Request a delivery report for this message
     *
     * @maps delivery_report
     */
    public function setDeliveryReport(?bool $deliveryReport): void
    {
        $this->deliveryReport = $deliveryReport;
    }

    /**
     * Returns Format.
     * Format of message, SMS, MMS or TTS (Text To Speech).
     *
     * @return string[]|null
     */
    public function getFormat(): ?array
    {
        return $this->format;
    }

    /**
     * Sets Format.
     * Format of message, SMS, MMS or TTS (Text To Speech).
     *
     * @maps format
     * @factory \MessagesLib\Models\FormatEnum::checkValue
     *
     * @param string[]|null $format
     */
    public function setFormat(?array $format): void
    {
        $this->format = $format;
    }

    /**
     * Returns Media.
     *
     * @return string[]|null
     */
    public function getMedia(): ?array
    {
        return $this->media;
    }

    /**
     * Sets Media.
     *
     * @maps media
     *
     * @param string[]|null $media
     */
    public function setMedia(?array $media): void
    {
        $this->media = $media;
    }

    /**
     * Returns Message Expiry Timestamp.
     * Date time after which the message expires and will not be sent
     */
    public function getMessageExpiryTimestamp(): ?\DateTime
    {
        return $this->messageExpiryTimestamp;
    }

    /**
     * Sets Message Expiry Timestamp.
     * Date time after which the message expires and will not be sent
     *
     * @maps message_expiry_timestamp
     * @factory \MessagesLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setMessageExpiryTimestamp(?\DateTime $messageExpiryTimestamp): void
    {
        $this->messageExpiryTimestamp = $messageExpiryTimestamp;
    }

    /**
     * Returns Metadata.
     * Metadata for the message specified as a set of key value pairs, each key can be up to 100 characters
     * long and each value can be up to 256 characters long
     * ```
     * {
     * "myKey": "myValue",
     * "anotherKey": "anotherValue"
     * }
     * ```
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Metadata for the message specified as a set of key value pairs, each key can be up to 100 characters
     * long and each value can be up to 256 characters long
     * ```
     * {
     * "myKey": "myValue",
     * "anotherKey": "anotherValue"
     * }
     * ```
     *
     * @maps metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Scheduled.
     * Scheduled delivery date time of the message
     */
    public function getScheduled(): ?\DateTime
    {
        return $this->scheduled;
    }

    /**
     * Sets Scheduled.
     * Scheduled delivery date time of the message
     *
     * @maps scheduled
     * @factory \MessagesLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setScheduled(?\DateTime $scheduled): void
    {
        $this->scheduled = $scheduled;
    }

    /**
     * Returns Source Number.
     */
    public function getSourceNumber(): ?string
    {
        return $this->sourceNumber;
    }

    /**
     * Sets Source Number.
     *
     * @maps source_number
     */
    public function setSourceNumber(?string $sourceNumber): void
    {
        $this->sourceNumber = $sourceNumber;
    }

    /**
     * Returns Source Number Type.
     * Type of source address specified, this can be INTERNATIONAL, ALPHANUMERIC or SHORTCODE
     */
    public function getSourceNumberType(): ?string
    {
        return $this->sourceNumberType;
    }

    /**
     * Sets Source Number Type.
     * Type of source address specified, this can be INTERNATIONAL, ALPHANUMERIC or SHORTCODE
     *
     * @maps source_number_type
     * @factory \MessagesLib\Models\SourceNumberTypeEnum::checkValue
     */
    public function setSourceNumberType(?string $sourceNumberType): void
    {
        $this->sourceNumberType = $sourceNumberType;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->callbackUrl)) {
            $json['callback_url']             = $this->callbackUrl;
        }
        $json['content']                      = $this->content;
        $json['destination_number']           = $this->destinationNumber;
        if (isset($this->deliveryReport)) {
            $json['delivery_report']          = $this->deliveryReport;
        }
        if (isset($this->format)) {
            $json['format']                   = FormatEnum::checkValue($this->format);
        }
        if (isset($this->media)) {
            $json['media']                    = $this->media;
        }
        if (isset($this->messageExpiryTimestamp)) {
            $json['message_expiry_timestamp'] = DateTimeHelper::toRfc3339DateTime($this->messageExpiryTimestamp);
        }
        if (isset($this->metadata)) {
            $json['metadata']                 = $this->metadata;
        }
        if (isset($this->scheduled)) {
            $json['scheduled']                = DateTimeHelper::toRfc3339DateTime($this->scheduled);
        }
        if (isset($this->sourceNumber)) {
            $json['source_number']            = $this->sourceNumber;
        }
        if (isset($this->sourceNumberType)) {
            $json['source_number_type']       = SourceNumberTypeEnum::checkValue($this->sourceNumberType);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
